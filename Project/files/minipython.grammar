Package minipython;

States

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z'];
	cr = 13;
	lf = 10;
	all = [0..127];
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];

Tokens
	tab = 9;
	/*Arithmetic operators*/
	plus = '+';
	minus = '-';
	mult = '*';
	expon = '**';
	div = '/';
	mod = '%';
	/*Assignment operators*/
	plus_eq = '+=';
	minus_eq = '-=';
	mult_eq = '*=';
	expon_eq = '**=';
	div_eq = '/=';
	mod_eq = '%=';
	eq = '=';
	/*Comparison operators*/
	equal = '==';
	not_equal = '!=';
	less = '<';
	greater = '>';
	less_equal = '<=';
	greater_equal = '>=';
	/*Logical operators*/
	and = 'and';
	or = 'or';
	not = 'not';
	/*in operator. not in will be counted as two tokens*/
	in = 'in';
	/*Parentheses and brackets*/
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	/*Special characters*/
	dot = '.';
	comma=',';
	semi = ':';
	double_quote = '"';
	single_quote = 39;
	/*logical constants*/
	true = 'true';
	false = 'false';
	/*Special words*/
	dictt = 'dict';
	def = 'def';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	print = 'print';
	return = 'return';
	assert = 'assert';
	open = 'open';
	type = 'type';
	max = 'max';
	min = 'min';
	none = 'None';
	/*These are the ignored tokens*/
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol;
	/*numbers, variable or function names and strings*/
	number = (digit+ | (digit* '.' digit+))(('e' | 'E') ('+' | '-')? digit+)?;
	id = (letter | '_') (letter | '_' | digit)*;
	string = ('"' not_eol* '"') | (39 not_eol* 39);
	
Ignored Tokens
	blank, line_comment;
	
Productions
	programme = commands*;
	
	commands ={stat} statement|
				 {expr}expression;
	
	statement ={if}tab* if  comparison semi statement |
				  {assign}tab* id eq expression |
				  {print}tab* print expression;
	
	comparison = {true} true|
					 {false} false|
					 {lessc} [lpar]:expression less [rpar]:expression|
					 {greatc}[lpar]:expression great [rpar]:expression;
					 
	expression = {multiplication} multiplication |
					{addition} expression plus multiplication|
					{subtraction} expression minus multiplication;
					
	multiplication = {something} something |
						  {multiplication} multiplication mult something;
						  
	something ={identifier}id|
				  {numb}number|
				  {par} l_par expression r_par;




Abstract Syntax Tree


